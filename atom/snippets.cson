# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
'.source.coffee':
  'Console log':
    'prefix': 'log'
    'body': 'console.log $1'

'.source.python':
  'RaiseNotImplemented':
    'prefix': 'rnot'
    'body': "raise NotImplementedError"
  'NotImplemented':
    'prefix': 'not'
    'body': "NotImplemented"
  'Log':
    'prefix': 'log'
    'body': "self.log.info(f'$1')"
  'Property':
    'prefix': 'prop'
    'body': '@property\ndef ${1:prop}(self):\n    $2'
  'ClassMethod':
    'prefix': 'classmethod'
    'body': '@classmethod\ndef ${1:classmethod}(cls):\n    $2'
  'MainBoilerplate':
    'prefix': 'main'
    'body': "if __name__ == '__main__':\n    $1"
  'Print':
    'prefix': 'print'
    'body': "print('$1')"
  'Dataclass':
    'prefix': 'dataclass'
    'body': '@dataclass\nclass ${1:SomeClass}:\n    ${2:attr}: ${3:str}'
  'Init':
    'prefix': 'init'
    'body': 'def __init__(self$1):\n    ${2:pass}'
  'Dunder':
    'prefix': 'dunder'
    'body': 'def __${1:dunder}__(self$2):\n    ${3:pass}'
  'Pytest':
    'prefix': 'pytest'
    'body': "@pytest.mark.parametrize('${1}', [])\ndef test_${2:something}(${1}):\n    ${3:pass}"
  'Class':
    'prefix': 'class'
    'body': "class ${1:name}(${2:Object}):\n    '${3:docstring}'\n    ${4:pass}"
  'FromImport':
    'prefix': 'from'
    'body': 'from ${1:module} import ${2:package}'
